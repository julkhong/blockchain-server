// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: blockchain-server.proto

// The package name determines the name of the directories that truss creates

package blockchain

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	_ "github.com/metaverse/truss/deftree/googlethirdparty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EchoRequest struct {
	In string `protobuf:"bytes,1,opt,name=In,proto3" json:"In,omitempty"`
}

func (m *EchoRequest) Reset()         { *m = EchoRequest{} }
func (m *EchoRequest) String() string { return proto.CompactTextString(m) }
func (*EchoRequest) ProtoMessage()    {}
func (*EchoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d6c9083788a8f1d, []int{0}
}
func (m *EchoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EchoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EchoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EchoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoRequest.Merge(m, src)
}
func (m *EchoRequest) XXX_Size() int {
	return m.Size()
}
func (m *EchoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EchoRequest proto.InternalMessageInfo

func (m *EchoRequest) GetIn() string {
	if m != nil {
		return m.In
	}
	return ""
}

type EchoResponse struct {
	Out string `protobuf:"bytes,1,opt,name=Out,proto3" json:"Out,omitempty"`
}

func (m *EchoResponse) Reset()         { *m = EchoResponse{} }
func (m *EchoResponse) String() string { return proto.CompactTextString(m) }
func (*EchoResponse) ProtoMessage()    {}
func (*EchoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d6c9083788a8f1d, []int{1}
}
func (m *EchoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EchoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EchoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EchoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoResponse.Merge(m, src)
}
func (m *EchoResponse) XXX_Size() int {
	return m.Size()
}
func (m *EchoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EchoResponse proto.InternalMessageInfo

func (m *EchoResponse) GetOut() string {
	if m != nil {
		return m.Out
	}
	return ""
}

type Parameters struct {
	SenderID   string  `protobuf:"bytes,1,opt,name=senderID,proto3" json:"senderID,omitempty"`
	ReceiverID string  `protobuf:"bytes,2,opt,name=receiverID,proto3" json:"receiverID,omitempty"`
	Amount     float32 `protobuf:"fixed32,3,opt,name=amount,proto3" json:"amount,omitempty"`
	AccountID  string  `protobuf:"bytes,4,opt,name=accountID,proto3" json:"accountID,omitempty"`
}

func (m *Parameters) Reset()         { *m = Parameters{} }
func (m *Parameters) String() string { return proto.CompactTextString(m) }
func (*Parameters) ProtoMessage()    {}
func (*Parameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d6c9083788a8f1d, []int{2}
}
func (m *Parameters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Parameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Parameters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Parameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Parameters.Merge(m, src)
}
func (m *Parameters) XXX_Size() int {
	return m.Size()
}
func (m *Parameters) XXX_DiscardUnknown() {
	xxx_messageInfo_Parameters.DiscardUnknown(m)
}

var xxx_messageInfo_Parameters proto.InternalMessageInfo

func (m *Parameters) GetSenderID() string {
	if m != nil {
		return m.SenderID
	}
	return ""
}

func (m *Parameters) GetReceiverID() string {
	if m != nil {
		return m.ReceiverID
	}
	return ""
}

func (m *Parameters) GetAmount() float32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Parameters) GetAccountID() string {
	if m != nil {
		return m.AccountID
	}
	return ""
}

type ChainCodeRequest struct {
	Id        uint32           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TimeStamp *types.Timestamp `protobuf:"bytes,2,opt,name=timeStamp,proto3" json:"timeStamp,omitempty"`
	Params    *Parameters      `protobuf:"bytes,3,opt,name=params,proto3" json:"params,omitempty"`
	Key       string           `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	Signature string           `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *ChainCodeRequest) Reset()         { *m = ChainCodeRequest{} }
func (m *ChainCodeRequest) String() string { return proto.CompactTextString(m) }
func (*ChainCodeRequest) ProtoMessage()    {}
func (*ChainCodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d6c9083788a8f1d, []int{3}
}
func (m *ChainCodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainCodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainCodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainCodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainCodeRequest.Merge(m, src)
}
func (m *ChainCodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *ChainCodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainCodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChainCodeRequest proto.InternalMessageInfo

func (m *ChainCodeRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ChainCodeRequest) GetTimeStamp() *types.Timestamp {
	if m != nil {
		return m.TimeStamp
	}
	return nil
}

func (m *ChainCodeRequest) GetParams() *Parameters {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *ChainCodeRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ChainCodeRequest) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

type ChainCodeResponse struct {
	Code   string  `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Id     uint32  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Amount float32 `protobuf:"fixed32,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *ChainCodeResponse) Reset()         { *m = ChainCodeResponse{} }
func (m *ChainCodeResponse) String() string { return proto.CompactTextString(m) }
func (*ChainCodeResponse) ProtoMessage()    {}
func (*ChainCodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d6c9083788a8f1d, []int{4}
}
func (m *ChainCodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainCodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainCodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainCodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainCodeResponse.Merge(m, src)
}
func (m *ChainCodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *ChainCodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainCodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChainCodeResponse proto.InternalMessageInfo

func (m *ChainCodeResponse) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *ChainCodeResponse) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ChainCodeResponse) GetAmount() float32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func init() {
	proto.RegisterType((*EchoRequest)(nil), "blockchain.EchoRequest")
	proto.RegisterType((*EchoResponse)(nil), "blockchain.EchoResponse")
	proto.RegisterType((*Parameters)(nil), "blockchain.Parameters")
	proto.RegisterType((*ChainCodeRequest)(nil), "blockchain.ChainCodeRequest")
	proto.RegisterType((*ChainCodeResponse)(nil), "blockchain.ChainCodeResponse")
}

func init() { proto.RegisterFile("blockchain-server.proto", fileDescriptor_6d6c9083788a8f1d) }

var fileDescriptor_6d6c9083788a8f1d = []byte{
	// 507 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x52, 0xb1, 0x6e, 0xdb, 0x30,
	0x14, 0xb4, 0x14, 0xc7, 0xb0, 0x9f, 0xdb, 0xc2, 0xe1, 0x10, 0x0b, 0x42, 0xac, 0x1a, 0x9a, 0xb2,
	0x54, 0x04, 0xdc, 0xa5, 0xb3, 0x93, 0x0c, 0x9e, 0x52, 0xa8, 0x9d, 0x82, 0x2e, 0xb4, 0xf4, 0x62,
	0x09, 0xb1, 0x48, 0x97, 0xa4, 0x0c, 0x64, 0xe9, 0xd0, 0x2f, 0x28, 0xd0, 0x9f, 0xe8, 0x47, 0xf4,
	0x03, 0x3a, 0x06, 0xe8, 0xd2, 0xb1, 0xb0, 0xfb, 0x21, 0x05, 0x29, 0xd9, 0x16, 0x5a, 0x64, 0xcb,
	0xf6, 0xc8, 0x3b, 0x1d, 0xef, 0xee, 0x09, 0x86, 0xf3, 0xa5, 0x48, 0xee, 0x92, 0x8c, 0xe5, 0xfc,
	0x95, 0x42, 0xb9, 0x46, 0x19, 0xad, 0xa4, 0xd0, 0x82, 0xc0, 0x01, 0xf0, 0xaf, 0x16, 0xb9, 0xce,
	0xca, 0x79, 0x94, 0x88, 0x82, 0x16, 0xa8, 0xd9, 0x1a, 0xa5, 0x42, 0xaa, 0x65, 0xa9, 0x14, 0x4d,
	0xf1, 0x56, 0x4b, 0x44, 0xba, 0x10, 0x62, 0xb1, 0x44, 0x9d, 0xe5, 0x32, 0x5d, 0x31, 0xa9, 0xef,
	0x29, 0xe3, 0x5c, 0x68, 0xa6, 0x73, 0xc1, 0x55, 0x25, 0xe9, 0xbf, 0xac, 0x38, 0xd4, 0x9e, 0xe6,
	0xe5, 0x2d, 0xd5, 0x79, 0x81, 0x4a, 0xb3, 0x62, 0x55, 0x11, 0xc2, 0x11, 0xf4, 0xaf, 0x92, 0x4c,
	0xc4, 0xf8, 0xb1, 0x44, 0xa5, 0xc9, 0x0b, 0x70, 0x67, 0xdc, 0x73, 0xc6, 0xce, 0x79, 0x2f, 0x76,
	0x67, 0x3c, 0x1c, 0xc3, 0xb3, 0x0a, 0x56, 0x2b, 0xc1, 0x15, 0x92, 0x01, 0x1c, 0x5d, 0x97, 0xba,
	0x26, 0x98, 0x31, 0xfc, 0x04, 0xf0, 0x96, 0x49, 0x56, 0xa0, 0x46, 0xa9, 0x88, 0x0f, 0x5d, 0x85,
	0x3c, 0x45, 0x39, 0xbb, 0xac, 0x49, 0xfb, 0x33, 0x09, 0x00, 0x24, 0x26, 0x98, 0xaf, 0x2d, 0xea,
	0x5a, 0xb4, 0x71, 0x43, 0x4e, 0xa1, 0xc3, 0x0a, 0x51, 0x72, 0xed, 0x1d, 0x8d, 0x9d, 0x73, 0x37,
	0xae, 0x4f, 0xe4, 0x0c, 0x7a, 0x2c, 0x49, 0xcc, 0x38, 0xbb, 0xf4, 0xda, 0xf6, 0xb3, 0xc3, 0x45,
	0xf8, 0xdd, 0x81, 0xc1, 0x85, 0xa9, 0xec, 0x42, 0xa4, 0xd8, 0x88, 0x91, 0xa7, 0xd6, 0xc0, 0xf3,
	0xd8, 0xcd, 0x53, 0xf2, 0x06, 0x7a, 0x26, 0xf8, 0x3b, 0x13, 0xdc, 0xbe, 0xdc, 0x9f, 0xf8, 0x51,
	0x55, 0x4d, 0xb4, 0xab, 0x26, 0x7a, 0xbf, 0xab, 0x26, 0x3e, 0x90, 0x49, 0x04, 0x9d, 0x95, 0x89,
	0xa7, 0xac, 0xa9, 0xfe, 0xe4, 0x34, 0x3a, 0x2c, 0x29, 0x3a, 0x04, 0x8f, 0x6b, 0x96, 0x29, 0xe8,
	0x0e, 0xef, 0x6b, 0x9b, 0x66, 0x34, 0xf6, 0x55, 0xbe, 0xe0, 0x4c, 0x97, 0x12, 0xbd, 0xe3, 0xca,
	0xfe, 0xfe, 0x22, 0xbc, 0x86, 0x93, 0x86, 0xfb, 0xba, 0x65, 0x02, 0xed, 0x44, 0xa4, 0x58, 0x37,
	0x68, 0xe7, 0x3a, 0x92, 0xbb, 0x8f, 0xf4, 0x48, 0x5b, 0x93, 0x6f, 0x2e, 0xc0, 0x74, 0x6f, 0x91,
	0xc4, 0xd0, 0x36, 0x0b, 0x24, 0xc3, 0xa6, 0xef, 0xc6, 0xc6, 0x7d, 0xef, 0x7f, 0xa0, 0x72, 0x11,
	0x0e, 0x3f, 0xff, 0xfc, 0xf3, 0xd5, 0x3d, 0x09, 0x8f, 0x29, 0x26, 0x99, 0xb8, 0xe9, 0x86, 0x1d,
	0x3b, 0x50, 0xf2, 0x01, 0xfa, 0x66, 0xa9, 0x53, 0xb6, 0x64, 0x3c, 0x41, 0x72, 0xd6, 0x54, 0xf8,
	0x77, 0x15, 0xfe, 0xe8, 0x11, 0xb4, 0x7e, 0x64, 0x60, 0x1f, 0x81, 0xb0, 0x4b, 0xe7, 0xb5, 0x5c,
	0x06, 0xb0, 0x40, 0xfd, 0x24, 0xe2, 0x23, 0x2b, 0x3e, 0x24, 0x7b, 0xf1, 0x9b, 0x3e, 0xe9, 0xed,
	0x66, 0x3a, 0xf5, 0x7e, 0x6c, 0x02, 0xe7, 0x61, 0x13, 0x38, 0xbf, 0x37, 0x81, 0xf3, 0x65, 0x1b,
	0xb4, 0x1e, 0xb6, 0x41, 0xeb, 0xd7, 0x36, 0x68, 0xcd, 0x3b, 0xf6, 0xa7, 0x78, 0xfd, 0x37, 0x00,
	0x00, 0xff, 0xff, 0xde, 0x3b, 0x25, 0x8a, 0xab, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BlockchainClient is the client API for Blockchain service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BlockchainClient interface {
	// Echo "echos" the incoming string
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	SendBalance(ctx context.Context, in *ChainCodeRequest, opts ...grpc.CallOption) (*ChainCodeResponse, error)
	GetBalance(ctx context.Context, in *ChainCodeRequest, opts ...grpc.CallOption) (*ChainCodeResponse, error)
}

type blockchainClient struct {
	cc *grpc.ClientConn
}

func NewBlockchainClient(cc *grpc.ClientConn) BlockchainClient {
	return &blockchainClient{cc}
}

func (c *blockchainClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, "/blockchain.Blockchain/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainClient) SendBalance(ctx context.Context, in *ChainCodeRequest, opts ...grpc.CallOption) (*ChainCodeResponse, error) {
	out := new(ChainCodeResponse)
	err := c.cc.Invoke(ctx, "/blockchain.Blockchain/sendBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainClient) GetBalance(ctx context.Context, in *ChainCodeRequest, opts ...grpc.CallOption) (*ChainCodeResponse, error) {
	out := new(ChainCodeResponse)
	err := c.cc.Invoke(ctx, "/blockchain.Blockchain/getBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockchainServer is the server API for Blockchain service.
type BlockchainServer interface {
	// Echo "echos" the incoming string
	Echo(context.Context, *EchoRequest) (*EchoResponse, error)
	SendBalance(context.Context, *ChainCodeRequest) (*ChainCodeResponse, error)
	GetBalance(context.Context, *ChainCodeRequest) (*ChainCodeResponse, error)
}

// UnimplementedBlockchainServer can be embedded to have forward compatible implementations.
type UnimplementedBlockchainServer struct {
}

func (*UnimplementedBlockchainServer) Echo(ctx context.Context, req *EchoRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (*UnimplementedBlockchainServer) SendBalance(ctx context.Context, req *ChainCodeRequest) (*ChainCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBalance not implemented")
}
func (*UnimplementedBlockchainServer) GetBalance(ctx context.Context, req *ChainCodeRequest) (*ChainCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}

func RegisterBlockchainServer(s *grpc.Server, srv BlockchainServer) {
	s.RegisterService(&_Blockchain_serviceDesc, srv)
}

func _Blockchain_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockchain.Blockchain/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blockchain_SendBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServer).SendBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockchain.Blockchain/SendBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServer).SendBalance(ctx, req.(*ChainCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blockchain_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockchain.Blockchain/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServer).GetBalance(ctx, req.(*ChainCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Blockchain_serviceDesc = grpc.ServiceDesc{
	ServiceName: "blockchain.Blockchain",
	HandlerType: (*BlockchainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _Blockchain_Echo_Handler,
		},
		{
			MethodName: "sendBalance",
			Handler:    _Blockchain_SendBalance_Handler,
		},
		{
			MethodName: "getBalance",
			Handler:    _Blockchain_GetBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blockchain-server.proto",
}

func (m *EchoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EchoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EchoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.In) > 0 {
		i -= len(m.In)
		copy(dAtA[i:], m.In)
		i = encodeVarintBlockchainServer(dAtA, i, uint64(len(m.In)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EchoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EchoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EchoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Out) > 0 {
		i -= len(m.Out)
		copy(dAtA[i:], m.Out)
		i = encodeVarintBlockchainServer(dAtA, i, uint64(len(m.Out)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Parameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Parameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Parameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AccountID) > 0 {
		i -= len(m.AccountID)
		copy(dAtA[i:], m.AccountID)
		i = encodeVarintBlockchainServer(dAtA, i, uint64(len(m.AccountID)))
		i--
		dAtA[i] = 0x22
	}
	if m.Amount != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Amount))))
		i--
		dAtA[i] = 0x1d
	}
	if len(m.ReceiverID) > 0 {
		i -= len(m.ReceiverID)
		copy(dAtA[i:], m.ReceiverID)
		i = encodeVarintBlockchainServer(dAtA, i, uint64(len(m.ReceiverID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SenderID) > 0 {
		i -= len(m.SenderID)
		copy(dAtA[i:], m.SenderID)
		i = encodeVarintBlockchainServer(dAtA, i, uint64(len(m.SenderID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChainCodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainCodeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainCodeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintBlockchainServer(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintBlockchainServer(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x22
	}
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBlockchainServer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.TimeStamp != nil {
		{
			size, err := m.TimeStamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBlockchainServer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintBlockchainServer(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChainCodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainCodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainCodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Amount))))
		i--
		dAtA[i] = 0x1d
	}
	if m.Id != 0 {
		i = encodeVarintBlockchainServer(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintBlockchainServer(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBlockchainServer(dAtA []byte, offset int, v uint64) int {
	offset -= sovBlockchainServer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EchoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.In)
	if l > 0 {
		n += 1 + l + sovBlockchainServer(uint64(l))
	}
	return n
}

func (m *EchoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Out)
	if l > 0 {
		n += 1 + l + sovBlockchainServer(uint64(l))
	}
	return n
}

func (m *Parameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SenderID)
	if l > 0 {
		n += 1 + l + sovBlockchainServer(uint64(l))
	}
	l = len(m.ReceiverID)
	if l > 0 {
		n += 1 + l + sovBlockchainServer(uint64(l))
	}
	if m.Amount != 0 {
		n += 5
	}
	l = len(m.AccountID)
	if l > 0 {
		n += 1 + l + sovBlockchainServer(uint64(l))
	}
	return n
}

func (m *ChainCodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBlockchainServer(uint64(m.Id))
	}
	if m.TimeStamp != nil {
		l = m.TimeStamp.Size()
		n += 1 + l + sovBlockchainServer(uint64(l))
	}
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovBlockchainServer(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovBlockchainServer(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovBlockchainServer(uint64(l))
	}
	return n
}

func (m *ChainCodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovBlockchainServer(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovBlockchainServer(uint64(m.Id))
	}
	if m.Amount != 0 {
		n += 5
	}
	return n
}

func sovBlockchainServer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBlockchainServer(x uint64) (n int) {
	return sovBlockchainServer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EchoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlockchainServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EchoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EchoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockchainServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockchainServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.In = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlockchainServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBlockchainServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EchoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlockchainServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EchoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EchoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Out", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockchainServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockchainServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Out = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlockchainServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBlockchainServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Parameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlockchainServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Parameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Parameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockchainServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockchainServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockchainServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockchainServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiverID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Amount = float32(math.Float32frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockchainServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockchainServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlockchainServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBlockchainServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainCodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlockchainServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainCodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainCodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeStamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlockchainServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBlockchainServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeStamp == nil {
				m.TimeStamp = &types.Timestamp{}
			}
			if err := m.TimeStamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlockchainServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBlockchainServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Parameters{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockchainServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockchainServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockchainServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockchainServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlockchainServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBlockchainServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainCodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlockchainServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainCodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainCodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockchainServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockchainServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Amount = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipBlockchainServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBlockchainServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBlockchainServer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBlockchainServer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlockchainServer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlockchainServer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBlockchainServer
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBlockchainServer
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBlockchainServer
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBlockchainServer        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBlockchainServer          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBlockchainServer = fmt.Errorf("proto: unexpected end of group")
)
