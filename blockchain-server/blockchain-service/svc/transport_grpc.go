// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: a2b01cac16
// Version Date: 2022-10-20T18:44:52Z

package svc

// This file provides server-side bindings for the gRPC transport.
// It utilizes the transport/grpc.Server.

import (
	"context"
	"net/http"

	"google.golang.org/grpc/metadata"

	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "github.com/julkhong/blockchain/blockchain-server"
)

// MakeGRPCServer makes a set of endpoints available as a gRPC BlockchainServer.
func MakeGRPCServer(endpoints Endpoints, options ...grpctransport.ServerOption) pb.BlockchainServer {
	serverOptions := []grpctransport.ServerOption{
		grpctransport.ServerBefore(metadataToContext),
	}
	serverOptions = append(serverOptions, options...)
	return &grpcServer{
		// blockchain

		echo: grpctransport.NewServer(
			endpoints.EchoEndpoint,
			DecodeGRPCEchoRequest,
			EncodeGRPCEchoResponse,
			serverOptions...,
		),
		sendbalance: grpctransport.NewServer(
			endpoints.SendBalanceEndpoint,
			DecodeGRPCSendBalanceRequest,
			EncodeGRPCSendBalanceResponse,
			serverOptions...,
		),
		getbalance: grpctransport.NewServer(
			endpoints.GetBalanceEndpoint,
			DecodeGRPCGetBalanceRequest,
			EncodeGRPCGetBalanceResponse,
			serverOptions...,
		),
	}
}

// grpcServer implements the BlockchainServer interface
type grpcServer struct {
	echo        grpctransport.Handler
	sendbalance grpctransport.Handler
	getbalance  grpctransport.Handler
}

// Methods for grpcServer to implement BlockchainServer interface

func (s *grpcServer) Echo(ctx context.Context, req *pb.EchoRequest) (*pb.EchoResponse, error) {
	_, rep, err := s.echo.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.EchoResponse), nil
}

func (s *grpcServer) SendBalance(ctx context.Context, req *pb.ChainCodeRequest) (*pb.ChainCodeResponse, error) {
	_, rep, err := s.sendbalance.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.ChainCodeResponse), nil
}

func (s *grpcServer) GetBalance(ctx context.Context, req *pb.ChainCodeRequest) (*pb.ChainCodeResponse, error) {
	_, rep, err := s.getbalance.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.ChainCodeResponse), nil
}

// Server Decode

// DecodeGRPCEchoRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC echo request to a user-domain echo request. Primarily useful in a server.
func DecodeGRPCEchoRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.EchoRequest)
	return req, nil
}

// DecodeGRPCSendBalanceRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC sendbalance request to a user-domain sendbalance request. Primarily useful in a server.
func DecodeGRPCSendBalanceRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.ChainCodeRequest)
	return req, nil
}

// DecodeGRPCGetBalanceRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC getbalance request to a user-domain getbalance request. Primarily useful in a server.
func DecodeGRPCGetBalanceRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.ChainCodeRequest)
	return req, nil
}

// Server Encode

// EncodeGRPCEchoResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain echo response to a gRPC echo reply. Primarily useful in a server.
func EncodeGRPCEchoResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.EchoResponse)
	return resp, nil
}

// EncodeGRPCSendBalanceResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain sendbalance response to a gRPC sendbalance reply. Primarily useful in a server.
func EncodeGRPCSendBalanceResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.ChainCodeResponse)
	return resp, nil
}

// EncodeGRPCGetBalanceResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain getbalance response to a gRPC getbalance reply. Primarily useful in a server.
func EncodeGRPCGetBalanceResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.ChainCodeResponse)
	return resp, nil
}

// Helpers

func metadataToContext(ctx context.Context, md metadata.MD) context.Context {
	for k, v := range md {
		if v != nil {
			// The key is added both in metadata format (k) which is all lower
			// and the http.CanonicalHeaderKey of the key so that it can be
			// accessed in either format
			ctx = context.WithValue(ctx, k, v[0])
			ctx = context.WithValue(ctx, http.CanonicalHeaderKey(k), v[0])
		}
	}

	return ctx
}
